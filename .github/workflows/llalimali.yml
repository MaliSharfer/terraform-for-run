# name: 🚀 Build and deploy container app to Azure Function App 

# # on:
# #   workflow_dispatch:

# on:
#   push:
#     branches:
#       - main


# jobs:
#  build-and-deploy:
#     runs-on: 'ubuntu-latest'

#     environment:
#       name: 'development'
#       url: ${{ steps.deploy-to-functions.outputs.app-url }}
      
#     strategy:
#       matrix:
#         directory:
#           - services/emails/func-emails
#           - services/subscriptions/func-subscriptions-automation
#           - services/subscriptions/func-subscriptions-list

#     steps:
#     - name: 📂 Checkout repository
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: 🛠️ Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: 🔑 Log in to registry
#       uses: docker/login-action@v2
#       with:
#         registry:  ghcr.io
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}

#     - name: 🔄 downcase REPO
#       uses: ASzc/change-string-case-action@v1
#       id: downcase
#       with:
#           string: ${{ github.repository }}

#     - name: ♻️ Set correct environment
#       run: |
#         REPO=${{ steps.downcase.outputs.lowercase }}
#         echo "REPO=$REPO" >> "$GITHUB_ENV"

#     - name: 🧰 Check and copy necessary files
#       run: |
#         DIRECTORY=${{ matrix.directory }}
#         REQUIRED_FILES=(".funcignore" ".gitignore" "host.json" "local.settings.json" "requirements.txt" "Dockerfile")
#         ROOT_DIRECTORY=$(pwd)
#         FILES_PATH="$ROOT_DIRECTORY/services"
#         for file in "${REQUIRED_FILES[@]}"; do
#           if [ ! -f "${FILES_PATH}/${file}" ]; then
#             echo "${file} not found in ${FILES_PATH}, cannot copy"
#           else
#             echo "${file} found in ${FILES_PATH}, copying from there"
#             cp "${FILES_PATH}/${file}" "${ROOT_DIRECTORY}/${DIRECTORY}/"
#           fi
#         done

#     - name: 🏗️ Build and push container image to registry
#       uses: docker/build-push-action@v3
#       with:
#         context: ./${{ matrix.directory }}
#         push: true
#         tags: ghcr.io/${{ env.REPO }}-${{ matrix.directory }}:latest
#         file: ./${{ matrix.directory }}/Dockerfile

#     - name: 🔑 Login to Azure
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     # - name: 🔄 Extract last directory level
#     #   run: |
#     #     LAST_LEVEL=$(basename ${{ matrix.directory }})
#     #     echo "${LAST_LEVEL}"
#     #   id: get-last-level

#     # - name: 🚀 Deploy to Azure Functions
#     #   id: deploy-to-functions
#     #   uses: Azure/functions-container-action@v1
#     #   with:
#     #     app-name: ${{ steps.get-last-level.outputs.last_level }}
#     #     image: 'ghcr.io/${{ env.REPO }}-${{ steps.get-last-level.outputs.last_level }}:latest'




#     - name: 🔄 Extract last directory level
#       run: |
#         LAST_LEVEL=$(basename ${{ matrix.directory }})
#         echo "LAST_LEVEL=${LAST_LEVEL}" >> "$GITHUB_ENV"
#       id: get-last-level
    
#     - name: 🚀 Deploy to Azure Functions
#       id: deploy-to-functions
#       uses: Azure/functions-container-action@v1
#       with:
#         app-name: ${{ env.LAST_LEVEL }}
#         image: ghcr.io/${{ env.REPO }}-${{ env.LAST_LEVEL }}:latest
